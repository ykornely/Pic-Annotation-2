[{"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\index.tsx":"1","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\App.tsx":"2","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Login.tsx":"3","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\api.ts":"4","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Pictures.tsx":"5","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Signup.tsx":"6","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Editor.tsx":"7","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\hooks\\useDebounced.tsx":"8"},{"size":218,"mtime":1611333010542,"results":"9","hashOfConfig":"10"},{"size":1152,"mtime":1612292609734,"results":"11","hashOfConfig":"10"},{"size":2321,"mtime":1612291594142,"results":"12","hashOfConfig":"10"},{"size":4111,"mtime":1613144458965,"results":"13","hashOfConfig":"10"},{"size":4451,"mtime":1613569554142,"results":"14","hashOfConfig":"10"},{"size":3595,"mtime":1612291230774,"results":"15","hashOfConfig":"10"},{"size":6714,"mtime":1613637845340,"results":"16","hashOfConfig":"10"},{"size":513,"mtime":1612284383571,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1t08ir4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\index.tsx",[],["36","37"],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\App.tsx",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Login.tsx",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\api.ts",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Pictures.tsx",["38","39","40","41"],"import { useState, useEffect, FC, useMemo } from 'react' // useCallback is usually used when you have a fnuction that takes a lot of time to finish and the useCallback caches it. It only runs that function when the dependencies change. Empty array as last parameter (dependency) causes it to only runs once when mounted.\r\nimport { getPictures, uploadPicture, patchPicture, deletePicture } from '../api'\r\nimport { Link } from 'react-router-dom'\r\nimport debounce from 'lodash.debounce'\r\nimport useDebounce from '../hooks/useDebounced'\r\n\r\nconst Picture: FC<{ picture: any; onPictureChange: any }> = (props) => {\r\n    const { picture, onPictureChange } = props\r\n    const [pictureDesc, setPictureDesc] = useState(picture.description)\r\n    const debouncedDesc = useDebounce(pictureDesc, 0) // pictureDesc changes for every key pressed. debouncedDesc's value changes only if you stop typing for 0.6 seconds.\r\n\r\n    useEffect(() => {\r\n        const asyncPatchPictures = async () => {\r\n            await patchPicture(picture._id, pictureDesc)\r\n        }\r\n        asyncPatchPictures()\r\n    }, [debouncedDesc]) // changes when debouncedDesc changes\r\n\r\n    useEffect(() => {\r\n        onPictureChange(picture)\r\n    }, [pictureDesc])\r\n\r\n    const handleOnChange = (e: any) => {\r\n        setPictureDesc(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"pictureComponent\">\r\n            <div id=\"pictureAndButton\">\r\n                <Link onClick={() => localStorage.setItem('aspectRatio', picture.aspectRatio)} to={`/pictures/${picture._id}`}>\r\n                    <img className=\"picture\" src={`http://localhost:3000/api/pictures/${picture._id}?token=${localStorage.getItem('token')}`} />\r\n                </Link>\r\n                <button\r\n                    className=\"pictureDeleteButton\"\r\n                    onClick={async () => {\r\n                        await deletePicture(picture._id)\r\n                        window.location.reload()\r\n                    }}\r\n                >\r\n                    Delete\r\n                </button>\r\n            </div>\r\n            <textarea className=\"pictureDescription\" placeholder=\"description\" value={pictureDesc} onChange={handleOnChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Pictures = () => {\r\n    const [pictures, setPictures] = useState([])\r\n    const [selectedFile, setSelectedFile] = useState<any>(null)\r\n    const [search, setSearch] = useState('')\r\n    useEffect(() => {\r\n        const asyncGetPictures = async () => {\r\n            const pictures = await getPictures()\r\n            setPictures(pictures)\r\n        }\r\n        asyncGetPictures()\r\n    }, []) // like ngOnInit, it only runs the first time you render it.\r\n\r\n    const filteredPictures = useMemo(() => {\r\n        if (search.length === 0) {\r\n            return pictures\r\n        } else {\r\n            return pictures.filter((picture: { description: string }) => picture.description.match(search))\r\n        }\r\n    }, [search, pictures])\r\n\r\n    const handleSubmit = async (event: any) => {\r\n        event.preventDefault()\r\n        await uploadPicture(selectedFile)\r\n    }\r\n\r\n    const handlePictureChange = (updatedPicture: any) => {\r\n        const updatedPictures = pictures.map((picture: any) => (picture._id === updatedPicture._id ? updatedPicture : picture))\r\n        setPictures(updatedPictures as any)\r\n    }\r\n\r\n    return (\r\n        // all picture in pictures are changed with map to an img tag.\r\n        <div>\r\n            <div id=\"logout\">\r\n            <Link to={`/login`}>\r\n                <h2 className=\"logoutAndBack\">Logout</h2>\r\n            </Link>\r\n            </div>\r\n            <div id=\"search\">\r\n                <label>Search: </label>\r\n                <input type=\"search\" value={search} placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} /> {/* two way binding (value and onChange)*/}\r\n            </div>\r\n            <div className=\"pictures\">\r\n                {filteredPictures.map((picture: any) => {\r\n                    return <Picture picture={picture} onPictureChange={handlePictureChange} key={picture._id}></Picture>\r\n                })}\r\n            </div>\r\n            <div id=\"upload\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"file\" onChange={(e) => setSelectedFile(e.target.files![0])} />\r\n                    <input type=\"submit\" value=\"Upload\" />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pictures\r\n","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Signup.tsx",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Editor.tsx",["42","43"],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\hooks\\useDebounced.tsx",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":16},{"ruleId":"52","severity":1,"message":"53","line":17,"column":8,"nodeType":"54","endLine":17,"endColumn":23,"suggestions":"55"},{"ruleId":"52","severity":1,"message":"56","line":21,"column":8,"nodeType":"54","endLine":21,"endColumn":21,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":31,"column":21,"nodeType":"60","endLine":31,"endColumn":145},{"ruleId":"48","severity":1,"message":"61","line":7,"column":10,"nodeType":"50","messageId":"51","endLine":7,"endColumn":16},{"ruleId":"52","severity":1,"message":"62","line":30,"column":8,"nodeType":"54","endLine":30,"endColumn":10,"suggestions":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'debounce' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'picture._id' and 'pictureDesc'. Either include them or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has missing dependencies: 'onPictureChange' and 'picture'. Either include them or remove the dependency array.",["67"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'render' is defined but never used.","React Hook useEffect has a missing dependency: 'params.pictureId'. Either include it or remove the dependency array.",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [debouncedDesc, picture._id, pictureDesc]",{"range":"75","text":"76"},"Update the dependencies array to be: [onPictureChange, picture, pictureDesc]",{"range":"77","text":"78"},"Update the dependencies array to be: [params.pictureId]",{"range":"79","text":"80"},[1084,1099],"[debouncedDesc, picture._id, pictureDesc]",[1206,1219],"[onPictureChange, picture, pictureDesc]",[1286,1288],"[params.pictureId]"]
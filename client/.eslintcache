[{"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\index.tsx":"1","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\App.tsx":"2","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Login.tsx":"3","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\api.ts":"4","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Pictures.tsx":"5","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Signup.tsx":"6","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Editor.tsx":"7","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\hooks\\useDebounced.tsx":"8"},{"size":218,"mtime":1611333010542,"results":"9","hashOfConfig":"10"},{"size":1152,"mtime":1612292609734,"results":"11","hashOfConfig":"10"},{"size":2321,"mtime":1612291594142,"results":"12","hashOfConfig":"10"},{"size":3458,"mtime":1612291468620,"results":"13","hashOfConfig":"10"},{"size":2867,"mtime":1612286588149,"results":"14","hashOfConfig":"10"},{"size":3595,"mtime":1612291230774,"results":"15","hashOfConfig":"10"},{"size":5457,"mtime":1612280053887,"results":"16","hashOfConfig":"10"},{"size":513,"mtime":1612284383571,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1t08ir4",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\index.tsx",[],["37","38"],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\App.tsx",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Login.tsx",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\api.ts",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Pictures.tsx",["39","40","41"],"import { useState, useEffect, FC } from 'react' // useCallback is usually used when you have a fnuction that takes a lot of time to finish and the useCallback caches it. It only runs that function when the dependencies change. Empty array as last parameter (dependency) causes it to only runs once when mounted.\r\nimport { getPictures, uploadPicture, patchPicture } from '../api'\r\nimport { Link } from 'react-router-dom'\r\nimport debounce from 'lodash.debounce'\r\nimport useDebounce from '../hooks/useDebounced'\r\n\r\nconst Picture: FC<{ picture: any }> = (props) => {\r\n    const { picture } = props\r\n    const [pictureDesc, setPictureDesc] = useState(picture.description)\r\n    const debouncedDesc = useDebounce(pictureDesc, 600) // pictureDesc changes for every key pressed. debouncedDesc's value changes only if you stop typing for 0.6 seconds.\r\n\r\n    useEffect(() => {\r\n        const asyncPatchPictures = async () => {\r\n            await patchPicture(picture._id, pictureDesc)\r\n        }\r\n        asyncPatchPictures()\r\n    }, [debouncedDesc]) // changes when debouncedDesc changes\r\n\r\n    const handleOnChange = (e: any) => {\r\n        setPictureDesc(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Link onClick={() => localStorage.setItem('aspectRatio', picture.aspectRatio)} className=\"picture\" to={`/pictures/${picture._id}`}>\r\n                <img src={`http://localhost:3000/api/pictures/${picture._id}?token=${localStorage.getItem(\"token\")}`} />\r\n            </Link>\r\n            <div className=\"description\">\r\n                <textarea value={pictureDesc} onChange={handleOnChange} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Pictures = () => {\r\n    const [pictures, setPictures] = useState([])\r\n    const [selectedFile, setSelectedFile] = useState<any>(null)\r\n    useEffect(() => {\r\n        const asyncGetPictures = async () => {\r\n            const pictures = await getPictures()\r\n            setPictures(pictures)\r\n        }\r\n        asyncGetPictures()\r\n    }, []) // like ngOnInit, it only runs the first time you render it.\r\n\r\n    const handleSubmit = async (event: any) => {\r\n        event.preventDefault()\r\n        await uploadPicture(selectedFile)\r\n    }\r\n\r\n    return (\r\n        // all picture in pictures are changed with map to an img tag.\r\n        <div>\r\n            <div className=\"pictures\">\r\n                {pictures.map((picture: any) => {\r\n                    return <Picture picture={picture} key={picture._id}></Picture>\r\n                })}\r\n            </div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"file\" onChange={(e) => setSelectedFile(e.target.files![0])} />\r\n                <input type=\"submit\" value=\"Upload\" />\r\n            </form>\r\n            <Link to={`/login`}>\r\n                <h2>Logout</h2>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pictures\r\n","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Signup.tsx",[],"C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\pages\\Editor.tsx",["42"],"import CanvasDraw from 'react-canvas-draw'\r\nimport { useRef } from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { getDrawings, patchDrawing, createDrawing } from '../api'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Editor = () => {\r\n    const params = useParams<any>()\r\n    const canvas = useRef<any>()\r\n    const [drawings, setDrawings] = useState<any[]>([])\r\n    const [drawingId, setDrawingId] = useState('')\r\n    const [drawingContent, setDrawingContent] = useState('')\r\n    const [drawingDesc, setDrawingDesc] = useState('')\r\n    const [canvasHeight, setCanvasHeight] = useState(100)\r\n\r\n    useEffect(() => {\r\n        const asyncGetDrawings = async () => {\r\n            const drawings = await getDrawings(params.pictureId)\r\n            console.log('set drawing')\r\n            setDrawings(drawings)\r\n            console.log('set drawingId')\r\n            if (drawings.length !== 0) {\r\n                setDrawingId(drawings[0]._id)\r\n                setDrawingContent(drawings[0].content)\r\n                setDrawingDesc(drawings[0].description)\r\n            }\r\n        }\r\n        asyncGetDrawings()\r\n        // return () => {console.log(\"Editor unmounted\")} // if you press \"back\", this arrow function will be called (umount)\r\n    }, []) // runs when mounted\r\n\r\n    if (drawings.length === 0) return null\r\n\r\n    const handleNewDrawing = async () => {\r\n        await createDrawing(params.pictureId)\r\n    }\r\n\r\n    return (\r\n        <div className=\"editor\">\r\n            <div className=\"drawings\">\r\n                {drawings.map((drawing: any) => {\r\n                    return (\r\n                        <button\r\n                            onClick={() => {\r\n                                setDrawingId(drawing._id)\r\n                                setDrawingContent(drawing.content)\r\n                                setDrawingDesc(drawing.description)\r\n                                canvas.current.loadSaveData(drawing.content, true) // bug of the canvasdraw library: doesn't refresh automatically on change, we have to refresh it manually\r\n                            }}\r\n                            className=\"drawing\"\r\n                            key={drawing._id}\r\n                        >\r\n                            drawing\r\n                        </button>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"newDrawing\"><button onClick={handleNewDrawing}>New Drawing</button></div>\r\n            <div className=\"toolbar\">\r\n                {drawingId !== '' && (\r\n                    <>\r\n                        <button className=\"tool\">brush</button>\r\n                        <button className=\"tool\">circle</button>\r\n                        <button\r\n                            className=\"tool\"\r\n                            onClick={() => {\r\n                                canvas.current.undo()\r\n                            }}\r\n                        >\r\n                            undo\r\n                        </button>\r\n                        <button\r\n                            className=\"tool\"\r\n                            onClick={() => {\r\n                                canvas.current.clear()\r\n                            }}\r\n                        >\r\n                            clear\r\n                        </button>\r\n                        <button\r\n                            className=\"tool\"\r\n                            onClick={async () => {\r\n                                const response = await patchDrawing(params.pictureId, drawingId, canvas.current.getSaveData(), drawingDesc)\r\n                                const updatedDrawing = await response.json();\r\n                                const updatedDrawings = drawings.map((drawing) => (drawing._id === updatedDrawing._id ? updatedDrawing : drawing))\r\n                                setDrawings(updatedDrawings)\r\n                            }}\r\n                        >\r\n                            save\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"canvas\">\r\n                <CanvasDraw\r\n                    ref={(ref) => {\r\n                        const aspectRatio = parseFloat(localStorage.getItem('aspectRatio')!)\r\n                        canvas.current = ref\r\n                        if (!!canvas.current) {\r\n                            console.log('set canvas')\r\n                            setCanvasHeight(canvas.current.canvasContainer.offsetWidth * aspectRatio)\r\n                            console.log(canvas.current.canvasContainer.offsetWidth * aspectRatio)\r\n                        }\r\n                    }}\r\n                    saveData={drawingContent}\r\n                    immediateLoading\r\n                    canvasWidth=\"100%\"\r\n                    canvasHeight={canvasHeight}\r\n                    brushRadius={1}\r\n                    hideGrid\r\n                    lazyRadius={4}\r\n                    brushColor=\"red\"\r\n                    imgSrc={`http://localhost:3000/api/pictures/${params.pictureId}`}\r\n                />\r\n            </div>\r\n            <div className=\"description\">\r\n                <textarea value={drawingDesc} onChange={(e) => setDrawingDesc(e.target.value)} />\r\n            </div>\r\n            <Link to={`/Pictures`}>\r\n                <h2>Back</h2>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\nexport default Editor\r\n","C:\\Users\\Bruno\\Desktop\\Szakdolgozat\\Pic-Annotation\\client\\src\\hooks\\useDebounced.tsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":17,"column":8,"nodeType":"53","endLine":17,"endColumn":23,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":26,"column":17,"nodeType":"57","endLine":26,"endColumn":121},{"ruleId":"51","severity":1,"message":"58","line":31,"column":8,"nodeType":"53","endLine":31,"endColumn":10,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"@typescript-eslint/no-unused-vars","'debounce' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'picture._id' and 'pictureDesc'. Either include them or remove the dependency array.","ArrayExpression",["62"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'params.pictureId'. Either include it or remove the dependency array.",["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [debouncedDesc, picture._id, pictureDesc]",{"range":"68","text":"69"},"Update the dependencies array to be: [params.pictureId]",{"range":"70","text":"71"},[1023,1038],"[debouncedDesc, picture._id, pictureDesc]",[1304,1306],"[params.pictureId]"]